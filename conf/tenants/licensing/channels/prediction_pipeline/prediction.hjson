{
	version: "6.0"
	tenant:  demo
	runtime: pyspark

  dag: [
    {
      type: elastic_input
      component: input
      settings:
      {
        index: licensing-report*
	aggregation: true
        query:
        {
  "size": 0, 
  "aggs": {
    "week": {
      "date_histogram": {
        "field": "event_timestamp",
        "interval": "week"
      },
      "aggs": {
        "user_number": {
          "cardinality": {
            "field": "user.keyword"
          }
        }
      }
    }
  }

        }
      }
      publish:
      [
        {
          stream: data
        }
      ]
    }
            {
                type: sql
                component: sql
                settings: {
                    statement_list: [
                    {
                        output_table_name: flat
                        statement: SELECT explode(*) from input_data
                    }
                    {
                        output_table_name: data
                        statement: SELECT flat.col.user_number.value as `aggregation.cardinality.user`, date_format(to_timestamp(CAST(to_unix_timestamp(flat.col.key_as_string, 'yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'') + 86400 AS LONG)), 'yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'')  as event_timestamp, "ICS-R2020" as project, "Jira" as tool from flat
                    }
                    ]
                }
                subscribe: [
                    {
                        component: input
                        stream: data
                    }
                ]
                publish: [
                    { 
                        stream: data
                    }
                ]
            }
    {

	package: nodes.my_use_case.my_node
        type: python_prediction
        component: prediction
        settings: {
		decoration : ["event_timestamp", "project", "tool"]
		inputs : ["aggregation.cardinality.user"]
		model_uri : models:/ICS-R2020-SE_jiratcm/production
		mlflow_host : localhost
		mlflow_port : 5000
        }
        subscribe: [
            {
                component: sql
                stream: data
            }
        ]
                publish: [
                    { 
                        stream: data
                    }
                ]
    }
    {
	package: nodes.my_use_case.my_node
        type: presentation
        component: final_presentation
        settings: {
        }
        subscribe: [
            {
                component: prediction
                stream: data
            }
	]
                publish: [
                    {
                        stream: data
                    }
                ]
    }
    {
      type: python_elastic_output
      component: python_elastic_output
      settings:
      {
                nodes:  ["localhost"]
                port : 9200 
                index: "licensing-prediction-report"
		login: ""
		password: "" 

      }
      subscribe:
      [
        {
          stream: data
          component: final_presentation
        }
      ]
    }
  ]
	settings: {
		spark.additional.pex:python_mlflow_prediction.pex
	}
}
